# this is the build file for project small_utility
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.13.0)
project(small_utility VERSION 0.0.2 LANGUAGES C CXX ASM)

# target
add_executable(test-file "")
set_target_properties(test-file PROPERTIES OUTPUT_NAME "test-file")
set_target_properties(test-file PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build")
add_dependencies(test-file small_utility)
target_include_directories(test-file PRIVATE
    test
    include
)
target_compile_options(test-file PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
target_compile_features(test-file PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(test-file PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(test-file PRIVATE -O0)
endif()
target_link_libraries(test-file PRIVATE
    small_utility
)
target_link_directories(test-file PRIVATE
    lib
    build
    build
)
target_link_options(test-file PRIVATE
    -m64
)
target_sources(test-file PRIVATE
    test/file/main.cc
)

# target
add_library(small_utility STATIC "")
set_target_properties(small_utility PROPERTIES OUTPUT_NAME "small_utility")
set_target_properties(small_utility PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "build")
target_include_directories(small_utility PRIVATE
    include
)
target_compile_options(small_utility PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
target_compile_features(small_utility PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(small_utility PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(small_utility PRIVATE -O0)
endif()
target_link_directories(small_utility PRIVATE
    lib
)
target_sources(small_utility PRIVATE
    src/file/file.cc
    src/time/time.cc
    src/utility/utility.cc
    src/log/logger.cc
    src/string/string.cc
    src/math/vector/vector.cc
    src/math/color/color.cc
    src/math/matrix/matrix.cc
)

# target
add_executable(test-utility "")
set_target_properties(test-utility PROPERTIES OUTPUT_NAME "test-utility")
set_target_properties(test-utility PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build")
add_dependencies(test-utility small_utility)
target_include_directories(test-utility PRIVATE
    test
    include
)
target_compile_options(test-utility PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
target_compile_features(test-utility PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(test-utility PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(test-utility PRIVATE -O0)
endif()
target_link_libraries(test-utility PRIVATE
    small_utility
)
target_link_directories(test-utility PRIVATE
    lib
    build
    build
)
target_link_options(test-utility PRIVATE
    -m64
)
target_sources(test-utility PRIVATE
    test/utility/main.cc
)

# target
add_executable(test-string "")
set_target_properties(test-string PROPERTIES OUTPUT_NAME "test-string")
set_target_properties(test-string PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build")
add_dependencies(test-string small_utility)
target_include_directories(test-string PRIVATE
    test
    include
)
target_compile_options(test-string PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
target_compile_features(test-string PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(test-string PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(test-string PRIVATE -O0)
endif()
target_link_libraries(test-string PRIVATE
    small_utility
)
target_link_directories(test-string PRIVATE
    lib
    build
    build
)
target_link_options(test-string PRIVATE
    -m64
)
target_sources(test-string PRIVATE
    test/string/main.cc
)

# target
add_executable(test-log "")
set_target_properties(test-log PROPERTIES OUTPUT_NAME "test-log")
set_target_properties(test-log PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build")
add_dependencies(test-log small_utility)
target_include_directories(test-log PRIVATE
    test
    include
)
target_compile_options(test-log PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
target_compile_features(test-log PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(test-log PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(test-log PRIVATE -O0)
endif()
target_link_libraries(test-log PRIVATE
    small_utility
)
target_link_directories(test-log PRIVATE
    lib
    build
    build
)
target_link_options(test-log PRIVATE
    -m64
)
target_sources(test-log PRIVATE
    test/log/main.cc
)

# target
add_executable(test-reference_counting "")
set_target_properties(test-reference_counting PROPERTIES OUTPUT_NAME "test-reference_counting")
set_target_properties(test-reference_counting PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build")
add_dependencies(test-reference_counting small_utility)
target_include_directories(test-reference_counting PRIVATE
    test
    include
)
target_compile_options(test-reference_counting PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
target_compile_features(test-reference_counting PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(test-reference_counting PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(test-reference_counting PRIVATE -O0)
endif()
target_link_libraries(test-reference_counting PRIVATE
    small_utility
)
target_link_directories(test-reference_counting PRIVATE
    lib
    build
    build
)
target_link_options(test-reference_counting PRIVATE
    -m64
)
target_sources(test-reference_counting PRIVATE
    test/reference_counting/main.cc
)

